<?php
/**
 * IntegrationApi
 * PHP version 8.1
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Semaphore API
 *
 * Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models.
 *
 * The version of the OpenAPI document: 2.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClientAPI\Semaphore\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ClientAPI\Semaphore\ApiException;
use ClientAPI\Semaphore\Configuration;
use ClientAPI\Semaphore\HeaderSelector;
use ClientAPI\Semaphore\ObjectSerializer;

/**
 * IntegrationApi Class Doc Comment
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IntegrationApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'projectProjectIdIntegrationsIntegrationIdMatchersGet' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdValuesGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersGet
     *
     * Get Integration Matcher linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\IntegrationMatcher[]
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersGet(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdIntegrationsIntegrationIdMatchersGetWithHttpInfo($projectId, $integrationId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersGetWithHttpInfo
     *
     * Get Integration Matcher linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\IntegrationMatcher[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersGetWithHttpInfo(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersGetRequest($projectId, $integrationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\IntegrationMatcher[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\IntegrationMatcher[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\IntegrationMatcher[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\IntegrationMatcher[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\IntegrationMatcher[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersGetAsync
     *
     * Get Integration Matcher linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersGetAsync(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdMatchersGetAsyncWithHttpInfo($projectId, $integrationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersGetAsyncWithHttpInfo
     *
     * Get Integration Matcher linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersGetAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\IntegrationMatcher[]';
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersGetRequest($projectId, $integrationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdMatchersGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersGetRequest(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdMatchersGet'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdMatchersGet'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/matchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete
     *
     * Removes integration matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete(
        int $projectId,
        int $integrationId,
        int $matcherId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteWithHttpInfo($projectId, $integrationId, $matcherId, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteWithHttpInfo
     *
     * Removes integration matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $matcherId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest($projectId, $integrationId, $matcherId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteAsync
     *
     * Removes integration matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteAsync(
        int $projectId,
        int $integrationId,
        int $matcherId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteAsyncWithHttpInfo($projectId, $integrationId, $matcherId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteAsyncWithHttpInfo
     *
     * Removes integration matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $matcherId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest($projectId, $integrationId, $matcherId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest(
        int $projectId,
        int $integrationId,
        int $matcherId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'
            );
        }

        // verify the required parameter 'matcherId' is set
        if ($matcherId === null || (is_array($matcherId) && count($matcherId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $matcherId when calling projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/matchers/{matcher_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }
        // path params
        if ($matcherId !== null) {
            $resourcePath = str_replace(
                '{' . 'matcher_id' . '}',
                ObjectSerializer::toPathValue($matcherId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut
     *
     * Updates Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut(
        int $projectId,
        int $integrationId,
        int $matcherId,
        \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutWithHttpInfo($projectId, $integrationId, $matcherId, $integrationMatcher, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutWithHttpInfo
     *
     * Updates Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $matcherId,
        \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest($projectId, $integrationId, $matcherId, $integrationMatcher, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutAsync
     *
     * Updates Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutAsync(
        int $projectId,
        int $integrationId,
        int $matcherId,
        \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutAsyncWithHttpInfo($projectId, $integrationId, $matcherId, $integrationMatcher, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutAsyncWithHttpInfo
     *
     * Updates Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $matcherId,
        \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest($projectId, $integrationId, $matcherId, $integrationMatcher, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $matcherId matcher ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest(
        int $projectId,
        int $integrationId,
        int $matcherId,
        \ClientAPI\Semaphore\Model\IntegrationMatcherRequest $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'
            );
        }

        // verify the required parameter 'matcherId' is set
        if ($matcherId === null || (is_array($matcherId) && count($matcherId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $matcherId when calling projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'
            );
        }

        // verify the required parameter 'integrationMatcher' is set
        if ($integrationMatcher === null || (is_array($integrationMatcher) && count($integrationMatcher) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationMatcher when calling projectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/matchers/{matcher_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }
        // path params
        if ($matcherId !== null) {
            $resourcePath = str_replace(
                '{' . 'matcher_id' . '}',
                ObjectSerializer::toPathValue($matcherId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($integrationMatcher)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($integrationMatcher));
            } else {
                $httpBody = $integrationMatcher;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete
     *
     * Removes integration extract value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteWithHttpInfo($projectId, $integrationId, $extractvalueId, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteWithHttpInfo
     *
     * Removes integration extract value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest($projectId, $integrationId, $extractvalueId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteAsync
     *
     * Removes integration extract value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteAsync(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteAsyncWithHttpInfo($projectId, $integrationId, $extractvalueId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteAsyncWithHttpInfo
     *
     * Removes integration extract value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest($projectId, $integrationId, $extractvalueId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'
            );
        }

        // verify the required parameter 'extractvalueId' is set
        if ($extractvalueId === null || (is_array($extractvalueId) && count($extractvalueId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $extractvalueId when calling projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/values/{extractvalue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }
        // path params
        if ($extractvalueId !== null) {
            $resourcePath = str_replace(
                '{' . 'extractvalue_id' . '}',
                ObjectSerializer::toPathValue($extractvalueId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut
     *
     * Updates Integration ExtractValue
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue integrationExtractValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutWithHttpInfo($projectId, $integrationId, $extractvalueId, $integrationExtractValue, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutWithHttpInfo
     *
     * Updates Integration ExtractValue
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest($projectId, $integrationId, $extractvalueId, $integrationExtractValue, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutAsync
     *
     * Updates Integration ExtractValue
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutAsync(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutAsyncWithHttpInfo($projectId, $integrationId, $extractvalueId, $integrationExtractValue, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutAsyncWithHttpInfo
     *
     * Updates Integration ExtractValue
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest($projectId, $integrationId, $extractvalueId, $integrationExtractValue, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  int $extractvalueId extractValue ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest(
        int $projectId,
        int $integrationId,
        int $extractvalueId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValueRequest $integrationExtractValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'
            );
        }

        // verify the required parameter 'extractvalueId' is set
        if ($extractvalueId === null || (is_array($extractvalueId) && count($extractvalueId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $extractvalueId when calling projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'
            );
        }

        // verify the required parameter 'integrationExtractValue' is set
        if ($integrationExtractValue === null || (is_array($integrationExtractValue) && count($integrationExtractValue) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationExtractValue when calling projectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/values/{extractvalue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }
        // path params
        if ($extractvalueId !== null) {
            $resourcePath = str_replace(
                '{' . 'extractvalue_id' . '}',
                ObjectSerializer::toPathValue($extractvalueId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($integrationExtractValue)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($integrationExtractValue));
            } else {
                $httpBody = $integrationExtractValue;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesGet
     *
     * Get Integration Extracted Values linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\IntegrationExtractValue[]
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesGet(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdIntegrationsIntegrationIdValuesGetWithHttpInfo($projectId, $integrationId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesGetWithHttpInfo
     *
     * Get Integration Extracted Values linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\IntegrationExtractValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesGetWithHttpInfo(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesGetRequest($projectId, $integrationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\IntegrationExtractValue[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\IntegrationExtractValue[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\IntegrationExtractValue[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\IntegrationExtractValue[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\IntegrationExtractValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesGetAsync
     *
     * Get Integration Extracted Values linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesGetAsync(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdValuesGetAsyncWithHttpInfo($projectId, $integrationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesGetAsyncWithHttpInfo
     *
     * Get Integration Extracted Values linked to integration extractor
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesGetAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\IntegrationExtractValue[]';
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesGetRequest($projectId, $integrationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdValuesGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesGetRequest(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdValuesGet'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdValuesGet'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
