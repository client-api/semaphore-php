<?php
/**
 * ProjectApi
 * PHP version 8.1
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Semaphore API
 *
 * Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models.
 *
 * The version of the OpenAPI document: 2.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClientAPI\Semaphore\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ClientAPI\Semaphore\ApiException;
use ClientAPI\Semaphore\Configuration;
use ClientAPI\Semaphore\HeaderSelector;
use ClientAPI\Semaphore\ObjectSerializer;

/**
 * ProjectApi Class Doc Comment
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProjectApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'projectProjectIdBackupGet' => [
            'application/json',
        ],
        'projectProjectIdDelete' => [
            'application/json',
        ],
        'projectProjectIdEnvironmentEnvironmentIdDelete' => [
            'application/json',
        ],
        'projectProjectIdEnvironmentEnvironmentIdGet' => [
            'application/json',
        ],
        'projectProjectIdEnvironmentEnvironmentIdPut' => [
            'application/json',
        ],
        'projectProjectIdEnvironmentGet' => [
            'application/json',
        ],
        'projectProjectIdEnvironmentPost' => [
            'application/json',
        ],
        'projectProjectIdEventsGet' => [
            'application/json',
        ],
        'projectProjectIdGet' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsGet' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdDelete' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdMatchersPost' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdPut' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsIntegrationIdValuesPost' => [
            'application/json',
        ],
        'projectProjectIdIntegrationsPost' => [
            'application/json',
        ],
        'projectProjectIdInventoryGet' => [
            'application/json',
        ],
        'projectProjectIdInventoryInventoryIdDelete' => [
            'application/json',
        ],
        'projectProjectIdInventoryInventoryIdGet' => [
            'application/json',
        ],
        'projectProjectIdInventoryInventoryIdPut' => [
            'application/json',
        ],
        'projectProjectIdInventoryPost' => [
            'application/json',
        ],
        'projectProjectIdKeysGet' => [
            'application/json',
        ],
        'projectProjectIdKeysKeyIdDelete' => [
            'application/json',
        ],
        'projectProjectIdKeysKeyIdPut' => [
            'application/json',
        ],
        'projectProjectIdKeysPost' => [
            'application/json',
        ],
        'projectProjectIdPut' => [
            'application/json',
        ],
        'projectProjectIdRepositoriesGet' => [
            'application/json',
        ],
        'projectProjectIdRepositoriesPost' => [
            'application/json',
        ],
        'projectProjectIdRepositoriesRepositoryIdDelete' => [
            'application/json',
        ],
        'projectProjectIdRepositoriesRepositoryIdGet' => [
            'application/json',
        ],
        'projectProjectIdRepositoriesRepositoryIdPut' => [
            'application/json',
        ],
        'projectProjectIdRoleGet' => [
            'application/json',
        ],
        'projectProjectIdTasksGet' => [
            'application/json',
        ],
        'projectProjectIdTasksLastGet' => [
            'application/json',
        ],
        'projectProjectIdTasksPost' => [
            'application/json',
        ],
        'projectProjectIdTasksTaskIdDelete' => [
            'application/json',
        ],
        'projectProjectIdTasksTaskIdGet' => [
            'application/json',
        ],
        'projectProjectIdTasksTaskIdOutputGet' => [
            'application/json',
        ],
        'projectProjectIdTasksTaskIdStopPost' => [
            'application/json',
        ],
        'projectProjectIdTemplatesGet' => [
            'application/json',
        ],
        'projectProjectIdTemplatesPost' => [
            'application/json',
        ],
        'projectProjectIdTemplatesTemplateIdDelete' => [
            'application/json',
        ],
        'projectProjectIdTemplatesTemplateIdGet' => [
            'application/json',
        ],
        'projectProjectIdTemplatesTemplateIdPut' => [
            'application/json',
        ],
        'projectProjectIdUsersGet' => [
            'application/json',
        ],
        'projectProjectIdUsersPost' => [
            'application/json',
        ],
        'projectProjectIdUsersUserIdDelete' => [
            'application/json',
        ],
        'projectProjectIdUsersUserIdPut' => [
            'application/json',
        ],
        'projectProjectIdViewsGet' => [
            'application/json',
        ],
        'projectProjectIdViewsPost' => [
            'application/json',
        ],
        'projectProjectIdViewsViewIdDelete' => [
            'application/json',
        ],
        'projectProjectIdViewsViewIdGet' => [
            'application/json',
        ],
        'projectProjectIdViewsViewIdPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation projectProjectIdBackupGet
     *
     * Backup A Project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdBackupGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\ProjectBackup
     */
    public function projectProjectIdBackupGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdBackupGet'][0]
    ): \ClientAPI\Semaphore\Model\ProjectBackup
    {
        list($response) = $this->projectProjectIdBackupGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdBackupGetWithHttpInfo
     *
     * Backup A Project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdBackupGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\ProjectBackup, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdBackupGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdBackupGet'][0]
    ): array
    {
        $request = $this->projectProjectIdBackupGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\ProjectBackup', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\ProjectBackup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\ProjectBackup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\ProjectBackup';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\ProjectBackup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdBackupGetAsync
     *
     * Backup A Project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdBackupGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdBackupGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdBackupGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdBackupGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdBackupGetAsyncWithHttpInfo
     *
     * Backup A Project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdBackupGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdBackupGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdBackupGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\ProjectBackup';
        $request = $this->projectProjectIdBackupGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdBackupGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdBackupGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdBackupGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdBackupGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdBackupGet'
            );
        }


        $resourcePath = '/project/{project_id}/backup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdDelete
     *
     * Delete project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdDelete(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdDelete'][0]
    ): void
    {
        $this->projectProjectIdDeleteWithHttpInfo($projectId, $contentType);
    }

    /**
     * Operation projectProjectIdDeleteWithHttpInfo
     *
     * Delete project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdDeleteWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdDeleteRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdDeleteAsync
     *
     * Delete project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdDeleteAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdDeleteAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdDeleteAsyncWithHttpInfo
     *
     * Delete project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdDeleteAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdDeleteRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdDeleteRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdDelete
     *
     * Removes environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdEnvironmentEnvironmentIdDelete(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'][0]
    ): void
    {
        $this->projectProjectIdEnvironmentEnvironmentIdDeleteWithHttpInfo($projectId, $environmentId, $contentType);
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdDeleteWithHttpInfo
     *
     * Removes environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdEnvironmentEnvironmentIdDeleteWithHttpInfo(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdEnvironmentEnvironmentIdDeleteRequest($projectId, $environmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdDeleteAsync
     *
     * Removes environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentEnvironmentIdDeleteAsync(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdEnvironmentEnvironmentIdDeleteAsyncWithHttpInfo($projectId, $environmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdDeleteAsyncWithHttpInfo
     *
     * Removes environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentEnvironmentIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdEnvironmentEnvironmentIdDeleteRequest($projectId, $environmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdEnvironmentEnvironmentIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdEnvironmentEnvironmentIdDeleteRequest(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdEnvironmentEnvironmentIdDelete'
            );
        }

        // verify the required parameter 'environmentId' is set
        if ($environmentId === null || (is_array($environmentId) && count($environmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $environmentId when calling projectProjectIdEnvironmentEnvironmentIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/environment/{environment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($environmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'environment_id' . '}',
                ObjectSerializer::toPathValue($environmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdGet
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Environment
     */
    public function projectProjectIdEnvironmentEnvironmentIdGet(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'][0]
    ): \ClientAPI\Semaphore\Model\Environment
    {
        list($response) = $this->projectProjectIdEnvironmentEnvironmentIdGetWithHttpInfo($projectId, $environmentId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdGetWithHttpInfo
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Environment, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdEnvironmentEnvironmentIdGetWithHttpInfo(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'][0]
    ): array
    {
        $request = $this->projectProjectIdEnvironmentEnvironmentIdGetRequest($projectId, $environmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Environment', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Environment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Environment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Environment';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Environment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdGetAsync
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentEnvironmentIdGetAsync(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdEnvironmentEnvironmentIdGetAsyncWithHttpInfo($projectId, $environmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdGetAsyncWithHttpInfo
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentEnvironmentIdGetAsyncWithHttpInfo(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Environment';
        $request = $this->projectProjectIdEnvironmentEnvironmentIdGetRequest($projectId, $environmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdEnvironmentEnvironmentIdGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdEnvironmentEnvironmentIdGetRequest(
        int $projectId,
        int $environmentId,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdEnvironmentEnvironmentIdGet'
            );
        }

        // verify the required parameter 'environmentId' is set
        if ($environmentId === null || (is_array($environmentId) && count($environmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $environmentId when calling projectProjectIdEnvironmentEnvironmentIdGet'
            );
        }


        $resourcePath = '/project/{project_id}/environment/{environment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($environmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'environment_id' . '}',
                ObjectSerializer::toPathValue($environmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdPut
     *
     * Update environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdEnvironmentEnvironmentIdPut(
        int $projectId,
        int $environmentId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'][0]
    ): void
    {
        $this->projectProjectIdEnvironmentEnvironmentIdPutWithHttpInfo($projectId, $environmentId, $environment, $contentType);
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdPutWithHttpInfo
     *
     * Update environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdEnvironmentEnvironmentIdPutWithHttpInfo(
        int $projectId,
        int $environmentId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdEnvironmentEnvironmentIdPutRequest($projectId, $environmentId, $environment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdPutAsync
     *
     * Update environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentEnvironmentIdPutAsync(
        int $projectId,
        int $environmentId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdEnvironmentEnvironmentIdPutAsyncWithHttpInfo($projectId, $environmentId, $environment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdEnvironmentEnvironmentIdPutAsyncWithHttpInfo
     *
     * Update environment
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentEnvironmentIdPutAsyncWithHttpInfo(
        int $projectId,
        int $environmentId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdEnvironmentEnvironmentIdPutRequest($projectId, $environmentId, $environment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdEnvironmentEnvironmentIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $environmentId environment ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdEnvironmentEnvironmentIdPutRequest(
        int $projectId,
        int $environmentId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentEnvironmentIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdEnvironmentEnvironmentIdPut'
            );
        }

        // verify the required parameter 'environmentId' is set
        if ($environmentId === null || (is_array($environmentId) && count($environmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $environmentId when calling projectProjectIdEnvironmentEnvironmentIdPut'
            );
        }

        // verify the required parameter 'environment' is set
        if ($environment === null || (is_array($environment) && count($environment) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $environment when calling projectProjectIdEnvironmentEnvironmentIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/environment/{environment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($environmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'environment_id' . '}',
                ObjectSerializer::toPathValue($environmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($environment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($environment));
            } else {
                $httpBody = $environment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdEnvironmentGet
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Environment[]
     */
    public function projectProjectIdEnvironmentGet(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdEnvironmentGetWithHttpInfo($projectId, $sort, $order, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdEnvironmentGetWithHttpInfo
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Environment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdEnvironmentGetWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentGet'][0]
    ): array
    {
        $request = $this->projectProjectIdEnvironmentGetRequest($projectId, $sort, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Environment[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Environment[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Environment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Environment[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Environment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdEnvironmentGetAsync
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentGetAsync(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdEnvironmentGetAsyncWithHttpInfo($projectId, $sort, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdEnvironmentGetAsyncWithHttpInfo
     *
     * Get environment
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentGetAsyncWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Environment[]';
        $request = $this->projectProjectIdEnvironmentGetRequest($projectId, $sort, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdEnvironmentGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdEnvironmentGetRequest(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdEnvironmentGet'
            );
        }

        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sort when calling projectProjectIdEnvironmentGet'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order when calling projectProjectIdEnvironmentGet'
            );
        }


        $resourcePath = '/project/{project_id}/environment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdEnvironmentPost
     *
     * Add environment
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Environment
     */
    public function projectProjectIdEnvironmentPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentPost'][0]
    ): \ClientAPI\Semaphore\Model\Environment
    {
        list($response) = $this->projectProjectIdEnvironmentPostWithHttpInfo($projectId, $environment, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdEnvironmentPostWithHttpInfo
     *
     * Add environment
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Environment, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdEnvironmentPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentPost'][0]
    ): array
    {
        $request = $this->projectProjectIdEnvironmentPostRequest($projectId, $environment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\Environment', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Environment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Environment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Environment';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Environment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdEnvironmentPostAsync
     *
     * Add environment
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdEnvironmentPostAsyncWithHttpInfo($projectId, $environment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdEnvironmentPostAsyncWithHttpInfo
     *
     * Add environment
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEnvironmentPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Environment';
        $request = $this->projectProjectIdEnvironmentPostRequest($projectId, $environment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdEnvironmentPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\EnvironmentRequest $environment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEnvironmentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdEnvironmentPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\EnvironmentRequest $environment,
        string $contentType = self::contentTypes['projectProjectIdEnvironmentPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdEnvironmentPost'
            );
        }

        // verify the required parameter 'environment' is set
        if ($environment === null || (is_array($environment) && count($environment) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $environment when calling projectProjectIdEnvironmentPost'
            );
        }


        $resourcePath = '/project/{project_id}/environment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($environment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($environment));
            } else {
                $httpBody = $environment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdEventsGet
     *
     * Get Events related to this project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEventsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Event[]
     */
    public function projectProjectIdEventsGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdEventsGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdEventsGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdEventsGetWithHttpInfo
     *
     * Get Events related to this project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEventsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdEventsGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdEventsGet'][0]
    ): array
    {
        $request = $this->projectProjectIdEventsGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Event[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Event[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Event[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Event[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdEventsGetAsync
     *
     * Get Events related to this project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEventsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEventsGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdEventsGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdEventsGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdEventsGetAsyncWithHttpInfo
     *
     * Get Events related to this project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEventsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdEventsGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdEventsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Event[]';
        $request = $this->projectProjectIdEventsGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdEventsGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdEventsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdEventsGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdEventsGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdEventsGet'
            );
        }


        $resourcePath = '/project/{project_id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdGet
     *
     * Fetch project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Project
     */
    public function projectProjectIdGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdGet'][0]
    ): \ClientAPI\Semaphore\Model\Project
    {
        list($response) = $this->projectProjectIdGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdGetWithHttpInfo
     *
     * Fetch project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdGet'][0]
    ): array
    {
        $request = $this->projectProjectIdGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Project', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Project' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Project', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Project';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdGetAsync
     *
     * Fetch project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdGetAsyncWithHttpInfo
     *
     * Fetch project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Project';
        $request = $this->projectProjectIdGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdGet'
            );
        }


        $resourcePath = '/project/{project_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsGet
     *
     * get all integrations
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Integration[]
     */
    public function projectProjectIdIntegrationsGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdIntegrationsGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdIntegrationsGetWithHttpInfo
     *
     * get all integrations
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Integration[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsGet'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Integration[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Integration[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Integration[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Integration[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Integration[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsGetAsync
     *
     * get all integrations
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsGetAsyncWithHttpInfo
     *
     * get all integrations
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Integration[]';
        $request = $this->projectProjectIdIntegrationsGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsGet'
            );
        }


        $resourcePath = '/project/{project_id}/integrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdDelete
     *
     * Remove integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdDelete(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdDeleteWithHttpInfo($projectId, $integrationId, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdDeleteWithHttpInfo
     *
     * Remove integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdDeleteWithHttpInfo(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdDeleteRequest($projectId, $integrationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdDeleteAsync
     *
     * Remove integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdDeleteAsync(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdDeleteAsyncWithHttpInfo($projectId, $integrationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdDeleteAsyncWithHttpInfo
     *
     * Remove integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdDeleteRequest($projectId, $integrationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdDeleteRequest(
        int $projectId,
        int $integrationId,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdDelete'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersPost
     *
     * Add Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersPost(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdMatchersPostWithHttpInfo($projectId, $integrationId, $integrationMatcher, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersPostWithHttpInfo
     *
     * Add Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersPostWithHttpInfo(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersPostRequest($projectId, $integrationId, $integrationMatcher, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersPostAsync
     *
     * Add Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersPostAsync(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdMatchersPostAsyncWithHttpInfo($projectId, $integrationId, $integrationMatcher, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdMatchersPostAsyncWithHttpInfo
     *
     * Add Integration Matcher
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersPostAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdMatchersPostRequest($projectId, $integrationId, $integrationMatcher, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdMatchersPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdMatchersPostRequest(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationMatcher $integrationMatcher,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdMatchersPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdMatchersPost'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdMatchersPost'
            );
        }

        // verify the required parameter 'integrationMatcher' is set
        if ($integrationMatcher === null || (is_array($integrationMatcher) && count($integrationMatcher) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationMatcher when calling projectProjectIdIntegrationsIntegrationIdMatchersPost'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/matchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($integrationMatcher)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($integrationMatcher));
            } else {
                $httpBody = $integrationMatcher;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdPut
     *
     * Update Integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdPut(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdPutWithHttpInfo($projectId, $integrationId, $integration, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdPutWithHttpInfo
     *
     * Update Integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdPutWithHttpInfo(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdPutRequest($projectId, $integrationId, $integration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdPutAsync
     *
     * Update Integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdPutAsync(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdPutAsyncWithHttpInfo($projectId, $integrationId, $integration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdPutAsyncWithHttpInfo
     *
     * Update Integration
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdPutAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdPutRequest($projectId, $integrationId, $integration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdPutRequest(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdPut'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdPut'
            );
        }

        // verify the required parameter 'integration' is set
        if ($integration === null || (is_array($integration) && count($integration) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integration when calling projectProjectIdIntegrationsIntegrationIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($integration)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($integration));
            } else {
                $httpBody = $integration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesPost
     *
     * Add Integration Extracted Value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue integrationExtractedValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesPost(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'][0]
    ): void
    {
        $this->projectProjectIdIntegrationsIntegrationIdValuesPostWithHttpInfo($projectId, $integrationId, $integrationExtractedValue, $contentType);
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesPostWithHttpInfo
     *
     * Add Integration Extracted Value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesPostWithHttpInfo(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesPostRequest($projectId, $integrationId, $integrationExtractedValue, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesPostAsync
     *
     * Add Integration Extracted Value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesPostAsync(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsIntegrationIdValuesPostAsyncWithHttpInfo($projectId, $integrationId, $integrationExtractedValue, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsIntegrationIdValuesPostAsyncWithHttpInfo
     *
     * Add Integration Extracted Value
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesPostAsyncWithHttpInfo(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdIntegrationsIntegrationIdValuesPostRequest($projectId, $integrationId, $integrationExtractedValue, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsIntegrationIdValuesPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $integrationId integration ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsIntegrationIdValuesPostRequest(
        int $projectId,
        int $integrationId,
        \ClientAPI\Semaphore\Model\IntegrationExtractValue $integrationExtractedValue,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsIntegrationIdValuesPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsIntegrationIdValuesPost'
            );
        }

        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationId when calling projectProjectIdIntegrationsIntegrationIdValuesPost'
            );
        }

        // verify the required parameter 'integrationExtractedValue' is set
        if ($integrationExtractedValue === null || (is_array($integrationExtractedValue) && count($integrationExtractedValue) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integrationExtractedValue when calling projectProjectIdIntegrationsIntegrationIdValuesPost'
            );
        }


        $resourcePath = '/project/{project_id}/integrations/{integration_id}/values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integration_id' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($integrationExtractedValue)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($integrationExtractedValue));
            } else {
                $httpBody = $integrationExtractedValue;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdIntegrationsPost
     *
     * create a new integration
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Integration
     */
    public function projectProjectIdIntegrationsPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsPost'][0]
    ): \ClientAPI\Semaphore\Model\Integration
    {
        list($response) = $this->projectProjectIdIntegrationsPostWithHttpInfo($projectId, $integration, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdIntegrationsPostWithHttpInfo
     *
     * create a new integration
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Integration, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdIntegrationsPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsPost'][0]
    ): array
    {
        $request = $this->projectProjectIdIntegrationsPostRequest($projectId, $integration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\Integration', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Integration' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Integration', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Integration';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Integration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdIntegrationsPostAsync
     *
     * create a new integration
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdIntegrationsPostAsyncWithHttpInfo($projectId, $integration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdIntegrationsPostAsyncWithHttpInfo
     *
     * create a new integration
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdIntegrationsPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Integration';
        $request = $this->projectProjectIdIntegrationsPostRequest($projectId, $integration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdIntegrationsPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\IntegrationRequest $integration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdIntegrationsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdIntegrationsPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\IntegrationRequest $integration,
        string $contentType = self::contentTypes['projectProjectIdIntegrationsPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdIntegrationsPost'
            );
        }

        // verify the required parameter 'integration' is set
        if ($integration === null || (is_array($integration) && count($integration) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $integration when calling projectProjectIdIntegrationsPost'
            );
        }


        $resourcePath = '/project/{project_id}/integrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($integration)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($integration));
            } else {
                $httpBody = $integration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdInventoryGet
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Inventory[]
     */
    public function projectProjectIdInventoryGet(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdInventoryGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdInventoryGetWithHttpInfo($projectId, $sort, $order, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdInventoryGetWithHttpInfo
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Inventory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdInventoryGetWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdInventoryGet'][0]
    ): array
    {
        $request = $this->projectProjectIdInventoryGetRequest($projectId, $sort, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Inventory[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Inventory[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Inventory[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Inventory[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Inventory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdInventoryGetAsync
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryGetAsync(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdInventoryGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdInventoryGetAsyncWithHttpInfo($projectId, $sort, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdInventoryGetAsyncWithHttpInfo
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryGetAsyncWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdInventoryGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Inventory[]';
        $request = $this->projectProjectIdInventoryGetRequest($projectId, $sort, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdInventoryGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdInventoryGetRequest(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdInventoryGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdInventoryGet'
            );
        }

        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sort when calling projectProjectIdInventoryGet'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order when calling projectProjectIdInventoryGet'
            );
        }


        $resourcePath = '/project/{project_id}/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdDelete
     *
     * Removes inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdInventoryInventoryIdDelete(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdDelete'][0]
    ): void
    {
        $this->projectProjectIdInventoryInventoryIdDeleteWithHttpInfo($projectId, $inventoryId, $contentType);
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdDeleteWithHttpInfo
     *
     * Removes inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdInventoryInventoryIdDeleteWithHttpInfo(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdInventoryInventoryIdDeleteRequest($projectId, $inventoryId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdDeleteAsync
     *
     * Removes inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryInventoryIdDeleteAsync(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdInventoryInventoryIdDeleteAsyncWithHttpInfo($projectId, $inventoryId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdDeleteAsyncWithHttpInfo
     *
     * Removes inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryInventoryIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdInventoryInventoryIdDeleteRequest($projectId, $inventoryId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdInventoryInventoryIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdInventoryInventoryIdDeleteRequest(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdInventoryInventoryIdDelete'
            );
        }

        // verify the required parameter 'inventoryId' is set
        if ($inventoryId === null || (is_array($inventoryId) && count($inventoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inventoryId when calling projectProjectIdInventoryInventoryIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/inventory/{inventory_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($inventoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'inventory_id' . '}',
                ObjectSerializer::toPathValue($inventoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdGet
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Inventory
     */
    public function projectProjectIdInventoryInventoryIdGet(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdGet'][0]
    ): \ClientAPI\Semaphore\Model\Inventory
    {
        list($response) = $this->projectProjectIdInventoryInventoryIdGetWithHttpInfo($projectId, $inventoryId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdGetWithHttpInfo
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Inventory, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdInventoryInventoryIdGetWithHttpInfo(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdGet'][0]
    ): array
    {
        $request = $this->projectProjectIdInventoryInventoryIdGetRequest($projectId, $inventoryId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Inventory', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Inventory' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Inventory', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Inventory';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Inventory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdGetAsync
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryInventoryIdGetAsync(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdInventoryInventoryIdGetAsyncWithHttpInfo($projectId, $inventoryId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdGetAsyncWithHttpInfo
     *
     * Get inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryInventoryIdGetAsyncWithHttpInfo(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Inventory';
        $request = $this->projectProjectIdInventoryInventoryIdGetRequest($projectId, $inventoryId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdInventoryInventoryIdGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdInventoryInventoryIdGetRequest(
        int $projectId,
        int $inventoryId,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdInventoryInventoryIdGet'
            );
        }

        // verify the required parameter 'inventoryId' is set
        if ($inventoryId === null || (is_array($inventoryId) && count($inventoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inventoryId when calling projectProjectIdInventoryInventoryIdGet'
            );
        }


        $resourcePath = '/project/{project_id}/inventory/{inventory_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($inventoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'inventory_id' . '}',
                ObjectSerializer::toPathValue($inventoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdPut
     *
     * Updates inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdInventoryInventoryIdPut(
        int $projectId,
        int $inventoryId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdPut'][0]
    ): void
    {
        $this->projectProjectIdInventoryInventoryIdPutWithHttpInfo($projectId, $inventoryId, $inventory, $contentType);
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdPutWithHttpInfo
     *
     * Updates inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdInventoryInventoryIdPutWithHttpInfo(
        int $projectId,
        int $inventoryId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdInventoryInventoryIdPutRequest($projectId, $inventoryId, $inventory, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdPutAsync
     *
     * Updates inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryInventoryIdPutAsync(
        int $projectId,
        int $inventoryId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdInventoryInventoryIdPutAsyncWithHttpInfo($projectId, $inventoryId, $inventory, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdInventoryInventoryIdPutAsyncWithHttpInfo
     *
     * Updates inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryInventoryIdPutAsyncWithHttpInfo(
        int $projectId,
        int $inventoryId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdInventoryInventoryIdPutRequest($projectId, $inventoryId, $inventory, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdInventoryInventoryIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $inventoryId inventory ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryInventoryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdInventoryInventoryIdPutRequest(
        int $projectId,
        int $inventoryId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryInventoryIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdInventoryInventoryIdPut'
            );
        }

        // verify the required parameter 'inventoryId' is set
        if ($inventoryId === null || (is_array($inventoryId) && count($inventoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inventoryId when calling projectProjectIdInventoryInventoryIdPut'
            );
        }

        // verify the required parameter 'inventory' is set
        if ($inventory === null || (is_array($inventory) && count($inventory) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inventory when calling projectProjectIdInventoryInventoryIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/inventory/{inventory_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($inventoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'inventory_id' . '}',
                ObjectSerializer::toPathValue($inventoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($inventory)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($inventory));
            } else {
                $httpBody = $inventory;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdInventoryPost
     *
     * create inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Inventory
     */
    public function projectProjectIdInventoryPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryPost'][0]
    ): \ClientAPI\Semaphore\Model\Inventory
    {
        list($response) = $this->projectProjectIdInventoryPostWithHttpInfo($projectId, $inventory, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdInventoryPostWithHttpInfo
     *
     * create inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Inventory, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdInventoryPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryPost'][0]
    ): array
    {
        $request = $this->projectProjectIdInventoryPostRequest($projectId, $inventory, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\Inventory', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Inventory' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Inventory', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Inventory';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Inventory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdInventoryPostAsync
     *
     * create inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdInventoryPostAsyncWithHttpInfo($projectId, $inventory, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdInventoryPostAsyncWithHttpInfo
     *
     * create inventory
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdInventoryPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Inventory';
        $request = $this->projectProjectIdInventoryPostRequest($projectId, $inventory, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdInventoryPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\InventoryRequest $inventory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdInventoryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdInventoryPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\InventoryRequest $inventory,
        string $contentType = self::contentTypes['projectProjectIdInventoryPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdInventoryPost'
            );
        }

        // verify the required parameter 'inventory' is set
        if ($inventory === null || (is_array($inventory) && count($inventory) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inventory when calling projectProjectIdInventoryPost'
            );
        }


        $resourcePath = '/project/{project_id}/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($inventory)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($inventory));
            } else {
                $httpBody = $inventory;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdKeysGet
     *
     * Get access keys linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string|null $keyType Filter by key type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\AccessKey[]
     */
    public function projectProjectIdKeysGet(
        int $projectId,
        string $sort,
        string $order,
        ?string $keyType = null,
        string $contentType = self::contentTypes['projectProjectIdKeysGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdKeysGetWithHttpInfo($projectId, $sort, $order, $keyType, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdKeysGetWithHttpInfo
     *
     * Get access keys linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string|null $keyType Filter by key type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\AccessKey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdKeysGetWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        ?string $keyType = null,
        string $contentType = self::contentTypes['projectProjectIdKeysGet'][0]
    ): array
    {
        $request = $this->projectProjectIdKeysGetRequest($projectId, $sort, $order, $keyType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\AccessKey[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\AccessKey[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\AccessKey[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\AccessKey[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\AccessKey[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdKeysGetAsync
     *
     * Get access keys linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string|null $keyType Filter by key type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysGetAsync(
        int $projectId,
        string $sort,
        string $order,
        ?string $keyType = null,
        string $contentType = self::contentTypes['projectProjectIdKeysGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdKeysGetAsyncWithHttpInfo($projectId, $sort, $order, $keyType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdKeysGetAsyncWithHttpInfo
     *
     * Get access keys linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string|null $keyType Filter by key type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysGetAsyncWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        ?string $keyType = null,
        string $contentType = self::contentTypes['projectProjectIdKeysGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\AccessKey[]';
        $request = $this->projectProjectIdKeysGetRequest($projectId, $sort, $order, $keyType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdKeysGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string|null $keyType Filter by key type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdKeysGetRequest(
        int $projectId,
        string $sort,
        string $order,
        ?string $keyType = null,
        string $contentType = self::contentTypes['projectProjectIdKeysGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdKeysGet'
            );
        }

        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sort when calling projectProjectIdKeysGet'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order when calling projectProjectIdKeysGet'
            );
        }



        $resourcePath = '/project/{project_id}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyType,
            'Key type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdKeysKeyIdDelete
     *
     * Removes access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdKeysKeyIdDelete(
        int $projectId,
        int $keyId,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdDelete'][0]
    ): void
    {
        $this->projectProjectIdKeysKeyIdDeleteWithHttpInfo($projectId, $keyId, $contentType);
    }

    /**
     * Operation projectProjectIdKeysKeyIdDeleteWithHttpInfo
     *
     * Removes access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdKeysKeyIdDeleteWithHttpInfo(
        int $projectId,
        int $keyId,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdKeysKeyIdDeleteRequest($projectId, $keyId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdKeysKeyIdDeleteAsync
     *
     * Removes access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysKeyIdDeleteAsync(
        int $projectId,
        int $keyId,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdKeysKeyIdDeleteAsyncWithHttpInfo($projectId, $keyId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdKeysKeyIdDeleteAsyncWithHttpInfo
     *
     * Removes access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysKeyIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $keyId,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdKeysKeyIdDeleteRequest($projectId, $keyId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdKeysKeyIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdKeysKeyIdDeleteRequest(
        int $projectId,
        int $keyId,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdKeysKeyIdDelete'
            );
        }

        // verify the required parameter 'keyId' is set
        if ($keyId === null || (is_array($keyId) && count($keyId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $keyId when calling projectProjectIdKeysKeyIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/keys/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($keyId !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($keyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdKeysKeyIdPut
     *
     * Updates access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdKeysKeyIdPut(
        int $projectId,
        int $keyId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdPut'][0]
    ): void
    {
        $this->projectProjectIdKeysKeyIdPutWithHttpInfo($projectId, $keyId, $accessKey, $contentType);
    }

    /**
     * Operation projectProjectIdKeysKeyIdPutWithHttpInfo
     *
     * Updates access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdKeysKeyIdPutWithHttpInfo(
        int $projectId,
        int $keyId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdKeysKeyIdPutRequest($projectId, $keyId, $accessKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdKeysKeyIdPutAsync
     *
     * Updates access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysKeyIdPutAsync(
        int $projectId,
        int $keyId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdKeysKeyIdPutAsyncWithHttpInfo($projectId, $keyId, $accessKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdKeysKeyIdPutAsyncWithHttpInfo
     *
     * Updates access key
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysKeyIdPutAsyncWithHttpInfo(
        int $projectId,
        int $keyId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdKeysKeyIdPutRequest($projectId, $keyId, $accessKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdKeysKeyIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $keyId key ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysKeyIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdKeysKeyIdPutRequest(
        int $projectId,
        int $keyId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysKeyIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdKeysKeyIdPut'
            );
        }

        // verify the required parameter 'keyId' is set
        if ($keyId === null || (is_array($keyId) && count($keyId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $keyId when calling projectProjectIdKeysKeyIdPut'
            );
        }

        // verify the required parameter 'accessKey' is set
        if ($accessKey === null || (is_array($accessKey) && count($accessKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $accessKey when calling projectProjectIdKeysKeyIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/keys/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($keyId !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($keyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accessKey)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accessKey));
            } else {
                $httpBody = $accessKey;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdKeysPost
     *
     * Add access key
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\AccessKey
     */
    public function projectProjectIdKeysPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysPost'][0]
    ): \ClientAPI\Semaphore\Model\AccessKey
    {
        list($response) = $this->projectProjectIdKeysPostWithHttpInfo($projectId, $accessKey, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdKeysPostWithHttpInfo
     *
     * Add access key
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\AccessKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdKeysPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysPost'][0]
    ): array
    {
        $request = $this->projectProjectIdKeysPostRequest($projectId, $accessKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\AccessKey', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\AccessKey' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\AccessKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\AccessKey';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\AccessKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdKeysPostAsync
     *
     * Add access key
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdKeysPostAsyncWithHttpInfo($projectId, $accessKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdKeysPostAsyncWithHttpInfo
     *
     * Add access key
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdKeysPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\AccessKey';
        $request = $this->projectProjectIdKeysPostRequest($projectId, $accessKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdKeysPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdKeysPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdKeysPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\AccessKeyRequest $accessKey,
        string $contentType = self::contentTypes['projectProjectIdKeysPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdKeysPost'
            );
        }

        // verify the required parameter 'accessKey' is set
        if ($accessKey === null || (is_array($accessKey) && count($accessKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $accessKey when calling projectProjectIdKeysPost'
            );
        }


        $resourcePath = '/project/{project_id}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accessKey)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accessKey));
            } else {
                $httpBody = $accessKey;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdPut
     *
     * Update project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdPut(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project,
        string $contentType = self::contentTypes['projectProjectIdPut'][0]
    ): void
    {
        $this->projectProjectIdPutWithHttpInfo($projectId, $project, $contentType);
    }

    /**
     * Operation projectProjectIdPutWithHttpInfo
     *
     * Update project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdPutWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project,
        string $contentType = self::contentTypes['projectProjectIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdPutRequest($projectId, $project, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdPutAsync
     *
     * Update project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdPutAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project,
        string $contentType = self::contentTypes['projectProjectIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdPutAsyncWithHttpInfo($projectId, $project, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdPutAsyncWithHttpInfo
     *
     * Update project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdPutAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project,
        string $contentType = self::contentTypes['projectProjectIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdPutRequest($projectId, $project, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdPutRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdPutRequest $project,
        string $contentType = self::contentTypes['projectProjectIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdPut'
            );
        }

        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $project when calling projectProjectIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($project)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($project));
            } else {
                $httpBody = $project;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdRepositoriesGet
     *
     * Get repositories
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Repository[]
     */
    public function projectProjectIdRepositoriesGet(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdRepositoriesGetWithHttpInfo($projectId, $sort, $order, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdRepositoriesGetWithHttpInfo
     *
     * Get repositories
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Repository[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdRepositoriesGetWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesGet'][0]
    ): array
    {
        $request = $this->projectProjectIdRepositoriesGetRequest($projectId, $sort, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Repository[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Repository[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Repository[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Repository[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Repository[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdRepositoriesGetAsync
     *
     * Get repositories
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesGetAsync(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdRepositoriesGetAsyncWithHttpInfo($projectId, $sort, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdRepositoriesGetAsyncWithHttpInfo
     *
     * Get repositories
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesGetAsyncWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Repository[]';
        $request = $this->projectProjectIdRepositoriesGetRequest($projectId, $sort, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdRepositoriesGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdRepositoriesGetRequest(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdRepositoriesGet'
            );
        }

        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sort when calling projectProjectIdRepositoriesGet'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order when calling projectProjectIdRepositoriesGet'
            );
        }


        $resourcePath = '/project/{project_id}/repositories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdRepositoriesPost
     *
     * Add repository
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Repository
     */
    public function projectProjectIdRepositoriesPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesPost'][0]
    ): \ClientAPI\Semaphore\Model\Repository
    {
        list($response) = $this->projectProjectIdRepositoriesPostWithHttpInfo($projectId, $repository, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdRepositoriesPostWithHttpInfo
     *
     * Add repository
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Repository, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdRepositoriesPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesPost'][0]
    ): array
    {
        $request = $this->projectProjectIdRepositoriesPostRequest($projectId, $repository, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\Repository', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Repository' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Repository', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Repository';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Repository',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdRepositoriesPostAsync
     *
     * Add repository
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdRepositoriesPostAsyncWithHttpInfo($projectId, $repository, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdRepositoriesPostAsyncWithHttpInfo
     *
     * Add repository
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Repository';
        $request = $this->projectProjectIdRepositoriesPostRequest($projectId, $repository, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdRepositoriesPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdRepositoriesPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdRepositoriesPost'
            );
        }

        // verify the required parameter 'repository' is set
        if ($repository === null || (is_array($repository) && count($repository) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $repository when calling projectProjectIdRepositoriesPost'
            );
        }


        $resourcePath = '/project/{project_id}/repositories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($repository)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($repository));
            } else {
                $httpBody = $repository;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdDelete
     *
     * Removes repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdRepositoriesRepositoryIdDelete(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'][0]
    ): void
    {
        $this->projectProjectIdRepositoriesRepositoryIdDeleteWithHttpInfo($projectId, $repositoryId, $contentType);
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdDeleteWithHttpInfo
     *
     * Removes repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdRepositoriesRepositoryIdDeleteWithHttpInfo(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdRepositoriesRepositoryIdDeleteRequest($projectId, $repositoryId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdDeleteAsync
     *
     * Removes repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesRepositoryIdDeleteAsync(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdRepositoriesRepositoryIdDeleteAsyncWithHttpInfo($projectId, $repositoryId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdDeleteAsyncWithHttpInfo
     *
     * Removes repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesRepositoryIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdRepositoriesRepositoryIdDeleteRequest($projectId, $repositoryId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdRepositoriesRepositoryIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdRepositoriesRepositoryIdDeleteRequest(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdRepositoriesRepositoryIdDelete'
            );
        }

        // verify the required parameter 'repositoryId' is set
        if ($repositoryId === null || (is_array($repositoryId) && count($repositoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $repositoryId when calling projectProjectIdRepositoriesRepositoryIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/repositories/{repository_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($repositoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'repository_id' . '}',
                ObjectSerializer::toPathValue($repositoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdGet
     *
     * Get repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Repository
     */
    public function projectProjectIdRepositoriesRepositoryIdGet(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'][0]
    ): \ClientAPI\Semaphore\Model\Repository
    {
        list($response) = $this->projectProjectIdRepositoriesRepositoryIdGetWithHttpInfo($projectId, $repositoryId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdGetWithHttpInfo
     *
     * Get repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Repository, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdRepositoriesRepositoryIdGetWithHttpInfo(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'][0]
    ): array
    {
        $request = $this->projectProjectIdRepositoriesRepositoryIdGetRequest($projectId, $repositoryId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Repository', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Repository' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Repository', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Repository';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Repository',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdGetAsync
     *
     * Get repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesRepositoryIdGetAsync(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdRepositoriesRepositoryIdGetAsyncWithHttpInfo($projectId, $repositoryId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdGetAsyncWithHttpInfo
     *
     * Get repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesRepositoryIdGetAsyncWithHttpInfo(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Repository';
        $request = $this->projectProjectIdRepositoriesRepositoryIdGetRequest($projectId, $repositoryId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdRepositoriesRepositoryIdGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdRepositoriesRepositoryIdGetRequest(
        int $projectId,
        int $repositoryId,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdRepositoriesRepositoryIdGet'
            );
        }

        // verify the required parameter 'repositoryId' is set
        if ($repositoryId === null || (is_array($repositoryId) && count($repositoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $repositoryId when calling projectProjectIdRepositoriesRepositoryIdGet'
            );
        }


        $resourcePath = '/project/{project_id}/repositories/{repository_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($repositoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'repository_id' . '}',
                ObjectSerializer::toPathValue($repositoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdPut
     *
     * Updates repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdRepositoriesRepositoryIdPut(
        int $projectId,
        int $repositoryId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'][0]
    ): void
    {
        $this->projectProjectIdRepositoriesRepositoryIdPutWithHttpInfo($projectId, $repositoryId, $repository, $contentType);
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdPutWithHttpInfo
     *
     * Updates repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdRepositoriesRepositoryIdPutWithHttpInfo(
        int $projectId,
        int $repositoryId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdRepositoriesRepositoryIdPutRequest($projectId, $repositoryId, $repository, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdPutAsync
     *
     * Updates repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesRepositoryIdPutAsync(
        int $projectId,
        int $repositoryId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdRepositoriesRepositoryIdPutAsyncWithHttpInfo($projectId, $repositoryId, $repository, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdRepositoriesRepositoryIdPutAsyncWithHttpInfo
     *
     * Updates repository
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRepositoriesRepositoryIdPutAsyncWithHttpInfo(
        int $projectId,
        int $repositoryId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdRepositoriesRepositoryIdPutRequest($projectId, $repositoryId, $repository, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdRepositoriesRepositoryIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $repositoryId repository ID (required)
     * @param  \ClientAPI\Semaphore\Model\RepositoryRequest $repository (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdRepositoriesRepositoryIdPutRequest(
        int $projectId,
        int $repositoryId,
        \ClientAPI\Semaphore\Model\RepositoryRequest $repository,
        string $contentType = self::contentTypes['projectProjectIdRepositoriesRepositoryIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdRepositoriesRepositoryIdPut'
            );
        }

        // verify the required parameter 'repositoryId' is set
        if ($repositoryId === null || (is_array($repositoryId) && count($repositoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $repositoryId when calling projectProjectIdRepositoriesRepositoryIdPut'
            );
        }

        // verify the required parameter 'repository' is set
        if ($repository === null || (is_array($repository) && count($repository) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $repository when calling projectProjectIdRepositoriesRepositoryIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/repositories/{repository_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($repositoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'repository_id' . '}',
                ObjectSerializer::toPathValue($repositoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($repository)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($repository));
            } else {
                $httpBody = $repository;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdRoleGet
     *
     * Fetch permissions of the current user for project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRoleGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response
     */
    public function projectProjectIdRoleGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdRoleGet'][0]
    ): \ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response
    {
        list($response) = $this->projectProjectIdRoleGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdRoleGetWithHttpInfo
     *
     * Fetch permissions of the current user for project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRoleGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdRoleGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdRoleGet'][0]
    ): array
    {
        $request = $this->projectProjectIdRoleGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdRoleGetAsync
     *
     * Fetch permissions of the current user for project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRoleGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRoleGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdRoleGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdRoleGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdRoleGetAsyncWithHttpInfo
     *
     * Fetch permissions of the current user for project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRoleGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdRoleGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdRoleGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\ProjectProjectIdRoleGet200Response';
        $request = $this->projectProjectIdRoleGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdRoleGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdRoleGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdRoleGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdRoleGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdRoleGet'
            );
        }


        $resourcePath = '/project/{project_id}/role';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTasksGet
     *
     * Get Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Task[]
     */
    public function projectProjectIdTasksGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdTasksGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTasksGetWithHttpInfo
     *
     * Get Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Task[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTasksGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksGet'][0]
    ): array
    {
        $request = $this->projectProjectIdTasksGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Task[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Task[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Task[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Task[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Task[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTasksGetAsync
     *
     * Get Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTasksGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTasksGetAsyncWithHttpInfo
     *
     * Get Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Task[]';
        $request = $this->projectProjectIdTasksGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTasksGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTasksGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTasksGet'
            );
        }


        $resourcePath = '/project/{project_id}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTasksLastGet
     *
     * Get last 200 Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksLastGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Task[]
     */
    public function projectProjectIdTasksLastGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksLastGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdTasksLastGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTasksLastGetWithHttpInfo
     *
     * Get last 200 Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksLastGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Task[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTasksLastGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksLastGet'][0]
    ): array
    {
        $request = $this->projectProjectIdTasksLastGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Task[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Task[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Task[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Task[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Task[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTasksLastGetAsync
     *
     * Get last 200 Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksLastGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksLastGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksLastGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTasksLastGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTasksLastGetAsyncWithHttpInfo
     *
     * Get last 200 Tasks related to current project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksLastGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksLastGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksLastGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Task[]';
        $request = $this->projectProjectIdTasksLastGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTasksLastGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksLastGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTasksLastGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdTasksLastGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTasksLastGet'
            );
        }


        $resourcePath = '/project/{project_id}/tasks/last';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTasksPost
     *
     * Starts a job
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task task (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Task
     */
    public function projectProjectIdTasksPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task,
        string $contentType = self::contentTypes['projectProjectIdTasksPost'][0]
    ): \ClientAPI\Semaphore\Model\Task
    {
        list($response) = $this->projectProjectIdTasksPostWithHttpInfo($projectId, $task, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTasksPostWithHttpInfo
     *
     * Starts a job
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Task, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTasksPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task,
        string $contentType = self::contentTypes['projectProjectIdTasksPost'][0]
    ): array
    {
        $request = $this->projectProjectIdTasksPostRequest($projectId, $task, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\Task', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Task' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Task', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Task';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Task',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTasksPostAsync
     *
     * Starts a job
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task,
        string $contentType = self::contentTypes['projectProjectIdTasksPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTasksPostAsyncWithHttpInfo($projectId, $task, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTasksPostAsyncWithHttpInfo
     *
     * Starts a job
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task,
        string $contentType = self::contentTypes['projectProjectIdTasksPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Task';
        $request = $this->projectProjectIdTasksPostRequest($projectId, $task, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTasksPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTasksPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdTasksPostRequest $task,
        string $contentType = self::contentTypes['projectProjectIdTasksPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTasksPost'
            );
        }

        // verify the required parameter 'task' is set
        if ($task === null || (is_array($task) && count($task) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $task when calling projectProjectIdTasksPost'
            );
        }


        $resourcePath = '/project/{project_id}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($task)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($task));
            } else {
                $httpBody = $task;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTasksTaskIdDelete
     *
     * Deletes task (including output)
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdTasksTaskIdDelete(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdDelete'][0]
    ): void
    {
        $this->projectProjectIdTasksTaskIdDeleteWithHttpInfo($projectId, $taskId, $contentType);
    }

    /**
     * Operation projectProjectIdTasksTaskIdDeleteWithHttpInfo
     *
     * Deletes task (including output)
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTasksTaskIdDeleteWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdTasksTaskIdDeleteRequest($projectId, $taskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTasksTaskIdDeleteAsync
     *
     * Deletes task (including output)
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdDeleteAsync(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTasksTaskIdDeleteAsyncWithHttpInfo($projectId, $taskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTasksTaskIdDeleteAsyncWithHttpInfo
     *
     * Deletes task (including output)
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdTasksTaskIdDeleteRequest($projectId, $taskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTasksTaskIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTasksTaskIdDeleteRequest(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTasksTaskIdDelete'
            );
        }

        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taskId when calling projectProjectIdTasksTaskIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/tasks/{task_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                '{' . 'task_id' . '}',
                ObjectSerializer::toPathValue($taskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTasksTaskIdGet
     *
     * Get a single task
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Task
     */
    public function projectProjectIdTasksTaskIdGet(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdGet'][0]
    ): \ClientAPI\Semaphore\Model\Task
    {
        list($response) = $this->projectProjectIdTasksTaskIdGetWithHttpInfo($projectId, $taskId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTasksTaskIdGetWithHttpInfo
     *
     * Get a single task
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Task, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTasksTaskIdGetWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdGet'][0]
    ): array
    {
        $request = $this->projectProjectIdTasksTaskIdGetRequest($projectId, $taskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Task', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Task' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Task', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Task';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Task',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTasksTaskIdGetAsync
     *
     * Get a single task
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdGetAsync(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTasksTaskIdGetAsyncWithHttpInfo($projectId, $taskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTasksTaskIdGetAsyncWithHttpInfo
     *
     * Get a single task
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdGetAsyncWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Task';
        $request = $this->projectProjectIdTasksTaskIdGetRequest($projectId, $taskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTasksTaskIdGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTasksTaskIdGetRequest(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTasksTaskIdGet'
            );
        }

        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taskId when calling projectProjectIdTasksTaskIdGet'
            );
        }


        $resourcePath = '/project/{project_id}/tasks/{task_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                '{' . 'task_id' . '}',
                ObjectSerializer::toPathValue($taskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTasksTaskIdOutputGet
     *
     * Get task output
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdOutputGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\TaskOutput[]
     */
    public function projectProjectIdTasksTaskIdOutputGet(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdOutputGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdTasksTaskIdOutputGetWithHttpInfo($projectId, $taskId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTasksTaskIdOutputGetWithHttpInfo
     *
     * Get task output
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdOutputGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\TaskOutput[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTasksTaskIdOutputGetWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdOutputGet'][0]
    ): array
    {
        $request = $this->projectProjectIdTasksTaskIdOutputGetRequest($projectId, $taskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\TaskOutput[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\TaskOutput[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\TaskOutput[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\TaskOutput[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\TaskOutput[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTasksTaskIdOutputGetAsync
     *
     * Get task output
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdOutputGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdOutputGetAsync(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdOutputGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTasksTaskIdOutputGetAsyncWithHttpInfo($projectId, $taskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTasksTaskIdOutputGetAsyncWithHttpInfo
     *
     * Get task output
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdOutputGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdOutputGetAsyncWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdOutputGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\TaskOutput[]';
        $request = $this->projectProjectIdTasksTaskIdOutputGetRequest($projectId, $taskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTasksTaskIdOutputGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdOutputGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTasksTaskIdOutputGetRequest(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdOutputGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTasksTaskIdOutputGet'
            );
        }

        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taskId when calling projectProjectIdTasksTaskIdOutputGet'
            );
        }


        $resourcePath = '/project/{project_id}/tasks/{task_id}/output';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                '{' . 'task_id' . '}',
                ObjectSerializer::toPathValue($taskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTasksTaskIdStopPost
     *
     * Stop a job
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdStopPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdTasksTaskIdStopPost(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdStopPost'][0]
    ): void
    {
        $this->projectProjectIdTasksTaskIdStopPostWithHttpInfo($projectId, $taskId, $contentType);
    }

    /**
     * Operation projectProjectIdTasksTaskIdStopPostWithHttpInfo
     *
     * Stop a job
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdStopPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTasksTaskIdStopPostWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdStopPost'][0]
    ): array
    {
        $request = $this->projectProjectIdTasksTaskIdStopPostRequest($projectId, $taskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTasksTaskIdStopPostAsync
     *
     * Stop a job
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdStopPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdStopPostAsync(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdStopPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTasksTaskIdStopPostAsyncWithHttpInfo($projectId, $taskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTasksTaskIdStopPostAsyncWithHttpInfo
     *
     * Stop a job
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdStopPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTasksTaskIdStopPostAsyncWithHttpInfo(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdStopPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdTasksTaskIdStopPostRequest($projectId, $taskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTasksTaskIdStopPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $taskId task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTasksTaskIdStopPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTasksTaskIdStopPostRequest(
        int $projectId,
        int $taskId,
        string $contentType = self::contentTypes['projectProjectIdTasksTaskIdStopPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTasksTaskIdStopPost'
            );
        }

        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taskId when calling projectProjectIdTasksTaskIdStopPost'
            );
        }


        $resourcePath = '/project/{project_id}/tasks/{task_id}/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                '{' . 'task_id' . '}',
                ObjectSerializer::toPathValue($taskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTemplatesGet
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Template[]
     */
    public function projectProjectIdTemplatesGet(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdTemplatesGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdTemplatesGetWithHttpInfo($projectId, $sort, $order, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTemplatesGetWithHttpInfo
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTemplatesGetWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdTemplatesGet'][0]
    ): array
    {
        $request = $this->projectProjectIdTemplatesGetRequest($projectId, $sort, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Template[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Template[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Template[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Template[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Template[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTemplatesGetAsync
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesGetAsync(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdTemplatesGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTemplatesGetAsyncWithHttpInfo($projectId, $sort, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTemplatesGetAsyncWithHttpInfo
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesGetAsyncWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdTemplatesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Template[]';
        $request = $this->projectProjectIdTemplatesGetRequest($projectId, $sort, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTemplatesGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTemplatesGetRequest(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdTemplatesGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTemplatesGet'
            );
        }

        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sort when calling projectProjectIdTemplatesGet'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order when calling projectProjectIdTemplatesGet'
            );
        }


        $resourcePath = '/project/{project_id}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTemplatesPost
     *
     * create template
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Template
     */
    public function projectProjectIdTemplatesPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesPost'][0]
    ): \ClientAPI\Semaphore\Model\Template
    {
        list($response) = $this->projectProjectIdTemplatesPostWithHttpInfo($projectId, $template, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTemplatesPostWithHttpInfo
     *
     * create template
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Template, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTemplatesPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesPost'][0]
    ): array
    {
        $request = $this->projectProjectIdTemplatesPostRequest($projectId, $template, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\Template', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Template' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Template', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Template';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Template',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTemplatesPostAsync
     *
     * create template
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTemplatesPostAsyncWithHttpInfo($projectId, $template, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTemplatesPostAsyncWithHttpInfo
     *
     * create template
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Template';
        $request = $this->projectProjectIdTemplatesPostRequest($projectId, $template, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTemplatesPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTemplatesPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTemplatesPost'
            );
        }

        // verify the required parameter 'template' is set
        if ($template === null || (is_array($template) && count($template) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template when calling projectProjectIdTemplatesPost'
            );
        }


        $resourcePath = '/project/{project_id}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($template)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($template));
            } else {
                $httpBody = $template;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdDelete
     *
     * Removes template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdTemplatesTemplateIdDelete(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'][0]
    ): void
    {
        $this->projectProjectIdTemplatesTemplateIdDeleteWithHttpInfo($projectId, $templateId, $contentType);
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdDeleteWithHttpInfo
     *
     * Removes template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTemplatesTemplateIdDeleteWithHttpInfo(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdTemplatesTemplateIdDeleteRequest($projectId, $templateId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdDeleteAsync
     *
     * Removes template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesTemplateIdDeleteAsync(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTemplatesTemplateIdDeleteAsyncWithHttpInfo($projectId, $templateId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdDeleteAsyncWithHttpInfo
     *
     * Removes template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesTemplateIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdTemplatesTemplateIdDeleteRequest($projectId, $templateId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTemplatesTemplateIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTemplatesTemplateIdDeleteRequest(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTemplatesTemplateIdDelete'
            );
        }

        // verify the required parameter 'templateId' is set
        if ($templateId === null || (is_array($templateId) && count($templateId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $templateId when calling projectProjectIdTemplatesTemplateIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/templates/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($templateId !== null) {
            $resourcePath = str_replace(
                '{' . 'template_id' . '}',
                ObjectSerializer::toPathValue($templateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdGet
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\Template
     */
    public function projectProjectIdTemplatesTemplateIdGet(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdGet'][0]
    ): \ClientAPI\Semaphore\Model\Template
    {
        list($response) = $this->projectProjectIdTemplatesTemplateIdGetWithHttpInfo($projectId, $templateId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdGetWithHttpInfo
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\Template, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTemplatesTemplateIdGetWithHttpInfo(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdGet'][0]
    ): array
    {
        $request = $this->projectProjectIdTemplatesTemplateIdGetRequest($projectId, $templateId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\Template', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\Template' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\Template', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\Template';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\Template',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdGetAsync
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesTemplateIdGetAsync(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTemplatesTemplateIdGetAsyncWithHttpInfo($projectId, $templateId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdGetAsyncWithHttpInfo
     *
     * Get template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesTemplateIdGetAsyncWithHttpInfo(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\Template';
        $request = $this->projectProjectIdTemplatesTemplateIdGetRequest($projectId, $templateId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTemplatesTemplateIdGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTemplatesTemplateIdGetRequest(
        int $projectId,
        int $templateId,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTemplatesTemplateIdGet'
            );
        }

        // verify the required parameter 'templateId' is set
        if ($templateId === null || (is_array($templateId) && count($templateId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $templateId when calling projectProjectIdTemplatesTemplateIdGet'
            );
        }


        $resourcePath = '/project/{project_id}/templates/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($templateId !== null) {
            $resourcePath = str_replace(
                '{' . 'template_id' . '}',
                ObjectSerializer::toPathValue($templateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdPut
     *
     * Updates template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdTemplatesTemplateIdPut(
        int $projectId,
        int $templateId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdPut'][0]
    ): void
    {
        $this->projectProjectIdTemplatesTemplateIdPutWithHttpInfo($projectId, $templateId, $template, $contentType);
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdPutWithHttpInfo
     *
     * Updates template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdTemplatesTemplateIdPutWithHttpInfo(
        int $projectId,
        int $templateId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdTemplatesTemplateIdPutRequest($projectId, $templateId, $template, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdPutAsync
     *
     * Updates template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesTemplateIdPutAsync(
        int $projectId,
        int $templateId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdTemplatesTemplateIdPutAsyncWithHttpInfo($projectId, $templateId, $template, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdTemplatesTemplateIdPutAsyncWithHttpInfo
     *
     * Updates template
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdTemplatesTemplateIdPutAsyncWithHttpInfo(
        int $projectId,
        int $templateId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdTemplatesTemplateIdPutRequest($projectId, $templateId, $template, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdTemplatesTemplateIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $templateId template ID (required)
     * @param  \ClientAPI\Semaphore\Model\TemplateRequest $template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdTemplatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdTemplatesTemplateIdPutRequest(
        int $projectId,
        int $templateId,
        \ClientAPI\Semaphore\Model\TemplateRequest $template,
        string $contentType = self::contentTypes['projectProjectIdTemplatesTemplateIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdTemplatesTemplateIdPut'
            );
        }

        // verify the required parameter 'templateId' is set
        if ($templateId === null || (is_array($templateId) && count($templateId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $templateId when calling projectProjectIdTemplatesTemplateIdPut'
            );
        }

        // verify the required parameter 'template' is set
        if ($template === null || (is_array($template) && count($template) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $template when calling projectProjectIdTemplatesTemplateIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/templates/{template_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($templateId !== null) {
            $resourcePath = str_replace(
                '{' . 'template_id' . '}',
                ObjectSerializer::toPathValue($templateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($template)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($template));
            } else {
                $httpBody = $template;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdUsersGet
     *
     * Get users linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\ProjectUser[]
     */
    public function projectProjectIdUsersGet(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdUsersGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdUsersGetWithHttpInfo($projectId, $sort, $order, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdUsersGetWithHttpInfo
     *
     * Get users linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\ProjectUser[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdUsersGetWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdUsersGet'][0]
    ): array
    {
        $request = $this->projectProjectIdUsersGetRequest($projectId, $sort, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\ProjectUser[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\ProjectUser[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\ProjectUser[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\ProjectUser[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\ProjectUser[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdUsersGetAsync
     *
     * Get users linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersGetAsync(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdUsersGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdUsersGetAsyncWithHttpInfo($projectId, $sort, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdUsersGetAsyncWithHttpInfo
     *
     * Get users linked to project
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersGetAsyncWithHttpInfo(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdUsersGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\ProjectUser[]';
        $request = $this->projectProjectIdUsersGetRequest($projectId, $sort, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdUsersGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $sort sorting name (required)
     * @param  string $order ordering manner (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdUsersGetRequest(
        int $projectId,
        string $sort,
        string $order,
        string $contentType = self::contentTypes['projectProjectIdUsersGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdUsersGet'
            );
        }

        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sort when calling projectProjectIdUsersGet'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order when calling projectProjectIdUsersGet'
            );
        }


        $resourcePath = '/project/{project_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdUsersPost
     *
     * Link user to project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdUsersPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user,
        string $contentType = self::contentTypes['projectProjectIdUsersPost'][0]
    ): void
    {
        $this->projectProjectIdUsersPostWithHttpInfo($projectId, $user, $contentType);
    }

    /**
     * Operation projectProjectIdUsersPostWithHttpInfo
     *
     * Link user to project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdUsersPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user,
        string $contentType = self::contentTypes['projectProjectIdUsersPost'][0]
    ): array
    {
        $request = $this->projectProjectIdUsersPostRequest($projectId, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdUsersPostAsync
     *
     * Link user to project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user,
        string $contentType = self::contentTypes['projectProjectIdUsersPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdUsersPostAsyncWithHttpInfo($projectId, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdUsersPostAsyncWithHttpInfo
     *
     * Link user to project
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user,
        string $contentType = self::contentTypes['projectProjectIdUsersPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdUsersPostRequest($projectId, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdUsersPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdUsersPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersPostRequest $user,
        string $contentType = self::contentTypes['projectProjectIdUsersPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdUsersPost'
            );
        }

        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $user when calling projectProjectIdUsersPost'
            );
        }


        $resourcePath = '/project/{project_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user));
            } else {
                $httpBody = $user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdUsersUserIdDelete
     *
     * Removes user from project
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdUsersUserIdDelete(
        int $projectId,
        int $userId,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdDelete'][0]
    ): void
    {
        $this->projectProjectIdUsersUserIdDeleteWithHttpInfo($projectId, $userId, $contentType);
    }

    /**
     * Operation projectProjectIdUsersUserIdDeleteWithHttpInfo
     *
     * Removes user from project
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdUsersUserIdDeleteWithHttpInfo(
        int $projectId,
        int $userId,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdUsersUserIdDeleteRequest($projectId, $userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdUsersUserIdDeleteAsync
     *
     * Removes user from project
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersUserIdDeleteAsync(
        int $projectId,
        int $userId,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdUsersUserIdDeleteAsyncWithHttpInfo($projectId, $userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdUsersUserIdDeleteAsyncWithHttpInfo
     *
     * Removes user from project
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersUserIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $userId,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdUsersUserIdDeleteRequest($projectId, $userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdUsersUserIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdUsersUserIdDeleteRequest(
        int $projectId,
        int $userId,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdUsersUserIdDelete'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling projectProjectIdUsersUserIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdUsersUserIdPut
     *
     * Update user role
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser projectUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdUsersUserIdPut(
        int $projectId,
        int $userId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdPut'][0]
    ): void
    {
        $this->projectProjectIdUsersUserIdPutWithHttpInfo($projectId, $userId, $projectUser, $contentType);
    }

    /**
     * Operation projectProjectIdUsersUserIdPutWithHttpInfo
     *
     * Update user role
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdUsersUserIdPutWithHttpInfo(
        int $projectId,
        int $userId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdUsersUserIdPutRequest($projectId, $userId, $projectUser, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdUsersUserIdPutAsync
     *
     * Update user role
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersUserIdPutAsync(
        int $projectId,
        int $userId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdUsersUserIdPutAsyncWithHttpInfo($projectId, $userId, $projectUser, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdUsersUserIdPutAsyncWithHttpInfo
     *
     * Update user role
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdUsersUserIdPutAsyncWithHttpInfo(
        int $projectId,
        int $userId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdUsersUserIdPutRequest($projectId, $userId, $projectUser, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdUsersUserIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $userId User ID (required)
     * @param  \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdUsersUserIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdUsersUserIdPutRequest(
        int $projectId,
        int $userId,
        \ClientAPI\Semaphore\Model\ProjectProjectIdUsersUserIdPutRequest $projectUser,
        string $contentType = self::contentTypes['projectProjectIdUsersUserIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdUsersUserIdPut'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling projectProjectIdUsersUserIdPut'
            );
        }

        // verify the required parameter 'projectUser' is set
        if ($projectUser === null || (is_array($projectUser) && count($projectUser) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectUser when calling projectProjectIdUsersUserIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectUser)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectUser));
            } else {
                $httpBody = $projectUser;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdViewsGet
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\View[]
     */
    public function projectProjectIdViewsGet(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdViewsGet'][0]
    ): array
    {
        list($response) = $this->projectProjectIdViewsGetWithHttpInfo($projectId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdViewsGetWithHttpInfo
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\View[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdViewsGetWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdViewsGet'][0]
    ): array
    {
        $request = $this->projectProjectIdViewsGetRequest($projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\View[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\View[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\View[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\View[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\View[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdViewsGetAsync
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsGetAsync(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdViewsGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdViewsGetAsyncWithHttpInfo($projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdViewsGetAsyncWithHttpInfo
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsGetAsyncWithHttpInfo(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdViewsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\View[]';
        $request = $this->projectProjectIdViewsGetRequest($projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdViewsGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdViewsGetRequest(
        int $projectId,
        string $contentType = self::contentTypes['projectProjectIdViewsGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdViewsGet'
            );
        }


        $resourcePath = '/project/{project_id}/views';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdViewsPost
     *
     * create view
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\View
     */
    public function projectProjectIdViewsPost(
        int $projectId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsPost'][0]
    ): \ClientAPI\Semaphore\Model\View
    {
        list($response) = $this->projectProjectIdViewsPostWithHttpInfo($projectId, $view, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdViewsPostWithHttpInfo
     *
     * create view
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\View, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdViewsPostWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsPost'][0]
    ): array
    {
        $request = $this->projectProjectIdViewsPostRequest($projectId, $view, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\ClientAPI\Semaphore\Model\View', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\View' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\View', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\View';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\View',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdViewsPostAsync
     *
     * create view
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsPostAsync(
        int $projectId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsPost'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdViewsPostAsyncWithHttpInfo($projectId, $view, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdViewsPostAsyncWithHttpInfo
     *
     * create view
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsPostAsyncWithHttpInfo(
        int $projectId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\View';
        $request = $this->projectProjectIdViewsPostRequest($projectId, $view, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdViewsPost'
     *
     * @param  int $projectId Project ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdViewsPostRequest(
        int $projectId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsPost'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdViewsPost'
            );
        }

        // verify the required parameter 'view' is set
        if ($view === null || (is_array($view) && count($view) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $view when calling projectProjectIdViewsPost'
            );
        }


        $resourcePath = '/project/{project_id}/views';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($view)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($view));
            } else {
                $httpBody = $view;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdViewsViewIdDelete
     *
     * Removes view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdViewsViewIdDelete(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdDelete'][0]
    ): void
    {
        $this->projectProjectIdViewsViewIdDeleteWithHttpInfo($projectId, $viewId, $contentType);
    }

    /**
     * Operation projectProjectIdViewsViewIdDeleteWithHttpInfo
     *
     * Removes view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdViewsViewIdDeleteWithHttpInfo(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdDelete'][0]
    ): array
    {
        $request = $this->projectProjectIdViewsViewIdDeleteRequest($projectId, $viewId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdViewsViewIdDeleteAsync
     *
     * Removes view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsViewIdDeleteAsync(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdDelete'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdViewsViewIdDeleteAsyncWithHttpInfo($projectId, $viewId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdViewsViewIdDeleteAsyncWithHttpInfo
     *
     * Removes view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsViewIdDeleteAsyncWithHttpInfo(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdViewsViewIdDeleteRequest($projectId, $viewId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdViewsViewIdDelete'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdViewsViewIdDeleteRequest(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdViewsViewIdDelete'
            );
        }

        // verify the required parameter 'viewId' is set
        if ($viewId === null || (is_array($viewId) && count($viewId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $viewId when calling projectProjectIdViewsViewIdDelete'
            );
        }


        $resourcePath = '/project/{project_id}/views/{view_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($viewId !== null) {
            $resourcePath = str_replace(
                '{' . 'view_id' . '}',
                ObjectSerializer::toPathValue($viewId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdViewsViewIdGet
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \ClientAPI\Semaphore\Model\View
     */
    public function projectProjectIdViewsViewIdGet(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdGet'][0]
    ): \ClientAPI\Semaphore\Model\View
    {
        list($response) = $this->projectProjectIdViewsViewIdGetWithHttpInfo($projectId, $viewId, $contentType);
        return $response;
    }

    /**
     * Operation projectProjectIdViewsViewIdGetWithHttpInfo
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \ClientAPI\Semaphore\Model\View, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdViewsViewIdGetWithHttpInfo(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdGet'][0]
    ): array
    {
        $request = $this->projectProjectIdViewsViewIdGetRequest($projectId, $viewId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\ClientAPI\Semaphore\Model\View', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClientAPI\Semaphore\Model\View' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClientAPI\Semaphore\Model\View', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ClientAPI\Semaphore\Model\View';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClientAPI\Semaphore\Model\View',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdViewsViewIdGetAsync
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsViewIdGetAsync(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdGet'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdViewsViewIdGetAsyncWithHttpInfo($projectId, $viewId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdViewsViewIdGetAsyncWithHttpInfo
     *
     * Get view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsViewIdGetAsyncWithHttpInfo(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ClientAPI\Semaphore\Model\View';
        $request = $this->projectProjectIdViewsViewIdGetRequest($projectId, $viewId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdViewsViewIdGet'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdViewsViewIdGetRequest(
        int $projectId,
        int $viewId,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdGet'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdViewsViewIdGet'
            );
        }

        // verify the required parameter 'viewId' is set
        if ($viewId === null || (is_array($viewId) && count($viewId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $viewId when calling projectProjectIdViewsViewIdGet'
            );
        }


        $resourcePath = '/project/{project_id}/views/{view_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($viewId !== null) {
            $resourcePath = str_replace(
                '{' . 'view_id' . '}',
                ObjectSerializer::toPathValue($viewId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectProjectIdViewsViewIdPut
     *
     * Updates view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function projectProjectIdViewsViewIdPut(
        int $projectId,
        int $viewId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdPut'][0]
    ): void
    {
        $this->projectProjectIdViewsViewIdPutWithHttpInfo($projectId, $viewId, $view, $contentType);
    }

    /**
     * Operation projectProjectIdViewsViewIdPutWithHttpInfo
     *
     * Updates view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectProjectIdViewsViewIdPutWithHttpInfo(
        int $projectId,
        int $viewId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdPut'][0]
    ): array
    {
        $request = $this->projectProjectIdViewsViewIdPutRequest($projectId, $viewId, $view, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectProjectIdViewsViewIdPutAsync
     *
     * Updates view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsViewIdPutAsync(
        int $projectId,
        int $viewId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdPut'][0]
    ): PromiseInterface
    {
        return $this->projectProjectIdViewsViewIdPutAsyncWithHttpInfo($projectId, $viewId, $view, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectProjectIdViewsViewIdPutAsyncWithHttpInfo
     *
     * Updates view
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectProjectIdViewsViewIdPutAsyncWithHttpInfo(
        int $projectId,
        int $viewId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->projectProjectIdViewsViewIdPutRequest($projectId, $viewId, $view, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectProjectIdViewsViewIdPut'
     *
     * @param  int $projectId Project ID (required)
     * @param  int $viewId view ID (required)
     * @param  \ClientAPI\Semaphore\Model\ViewRequest $view (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectProjectIdViewsViewIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectProjectIdViewsViewIdPutRequest(
        int $projectId,
        int $viewId,
        \ClientAPI\Semaphore\Model\ViewRequest $view,
        string $contentType = self::contentTypes['projectProjectIdViewsViewIdPut'][0]
    ): Request
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectId when calling projectProjectIdViewsViewIdPut'
            );
        }

        // verify the required parameter 'viewId' is set
        if ($viewId === null || (is_array($viewId) && count($viewId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $viewId when calling projectProjectIdViewsViewIdPut'
            );
        }

        // verify the required parameter 'view' is set
        if ($view === null || (is_array($view) && count($view) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $view when calling projectProjectIdViewsViewIdPut'
            );
        }


        $resourcePath = '/project/{project_id}/views/{view_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($viewId !== null) {
            $resourcePath = str_replace(
                '{' . 'view_id' . '}',
                ObjectSerializer::toPathValue($viewId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($view)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($view));
            } else {
                $httpBody = $view;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cookie');
        if ($apiKey !== null) {
            $headers['Cookie'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
