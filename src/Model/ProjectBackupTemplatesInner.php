<?php
/**
 * ProjectBackupTemplatesInner
 *
 * PHP version 8.1
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Semaphore API
 *
 * Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models.
 *
 * The version of the OpenAPI document: 2.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClientAPI\Semaphore\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ClientAPI\Semaphore\ObjectSerializer;

/**
 * ProjectBackupTemplatesInner Class Doc Comment
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ProjectBackupTemplatesInner implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ProjectBackup_templates_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'inventory' => 'string',
        'repository' => 'string',
        'environment' => 'string',
        'view' => 'string',
        'name' => 'string',
        'playbook' => 'string',
        'description' => 'string',
        'allowOverrideArgsInTask' => 'bool',
        'suppressSuccessAlerts' => 'bool',
        'autorun' => 'bool',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'inventory' => null,
        'repository' => null,
        'environment' => null,
        'view' => null,
        'name' => null,
        'playbook' => null,
        'description' => null,
        'allowOverrideArgsInTask' => null,
        'suppressSuccessAlerts' => null,
        'autorun' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'inventory' => false,
        'repository' => false,
        'environment' => false,
        'view' => false,
        'name' => false,
        'playbook' => false,
        'description' => false,
        'allowOverrideArgsInTask' => false,
        'suppressSuccessAlerts' => false,
        'autorun' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'inventory' => 'inventory',
        'repository' => 'repository',
        'environment' => 'environment',
        'view' => 'view',
        'name' => 'name',
        'playbook' => 'playbook',
        'description' => 'description',
        'allowOverrideArgsInTask' => 'allow_override_args_in_task',
        'suppressSuccessAlerts' => 'suppress_success_alerts',
        'autorun' => 'autorun',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'inventory' => 'setInventory',
        'repository' => 'setRepository',
        'environment' => 'setEnvironment',
        'view' => 'setView',
        'name' => 'setName',
        'playbook' => 'setPlaybook',
        'description' => 'setDescription',
        'allowOverrideArgsInTask' => 'setAllowOverrideArgsInTask',
        'suppressSuccessAlerts' => 'setSuppressSuccessAlerts',
        'autorun' => 'setAutorun',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'inventory' => 'getInventory',
        'repository' => 'getRepository',
        'environment' => 'getEnvironment',
        'view' => 'getView',
        'name' => 'getName',
        'playbook' => 'getPlaybook',
        'description' => 'getDescription',
        'allowOverrideArgsInTask' => 'getAllowOverrideArgsInTask',
        'suppressSuccessAlerts' => 'getSuppressSuccessAlerts',
        'autorun' => 'getAutorun',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('repository', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], null);
        $this->setIfExists('view', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('playbook', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('allowOverrideArgsInTask', $data ?? [], null);
        $this->setIfExists('suppressSuccessAlerts', $data ?? [], null);
        $this->setIfExists('autorun', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory
     *
     * @return string|null
     */
    public function getInventory(): ?string
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string|null $inventory inventory
     *
     * @return $this
     */
    public function setInventory(?string $inventory): static
    {
        if (is_null($inventory)) {
            throw new InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return string|null
     */
    public function getRepository(): ?string
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param string|null $repository repository
     *
     * @return $this
     */
    public function setRepository(?string $repository): static
    {
        if (is_null($repository)) {
            throw new InvalidArgumentException('non-nullable repository cannot be null');
        }
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string|null
     */
    public function getEnvironment(): ?string
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string|null $environment environment
     *
     * @return $this
     */
    public function setEnvironment(?string $environment): static
    {
        if (is_null($environment)) {
            throw new InvalidArgumentException('non-nullable environment cannot be null');
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets view
     *
     * @return string|null
     */
    public function getView(): ?string
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param string|null $view view
     *
     * @return $this
     */
    public function setView(?string $view): static
    {
        if (is_null($view)) {
            throw new InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets playbook
     *
     * @return string|null
     */
    public function getPlaybook(): ?string
    {
        return $this->container['playbook'];
    }

    /**
     * Sets playbook
     *
     * @param string|null $playbook playbook
     *
     * @return $this
     */
    public function setPlaybook(?string $playbook): static
    {
        if (is_null($playbook)) {
            throw new InvalidArgumentException('non-nullable playbook cannot be null');
        }
        $this->container['playbook'] = $playbook;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets allowOverrideArgsInTask
     *
     * @return bool|null
     */
    public function getAllowOverrideArgsInTask(): ?bool
    {
        return $this->container['allowOverrideArgsInTask'];
    }

    /**
     * Sets allowOverrideArgsInTask
     *
     * @param bool|null $allowOverrideArgsInTask allowOverrideArgsInTask
     *
     * @return $this
     */
    public function setAllowOverrideArgsInTask(?bool $allowOverrideArgsInTask): static
    {
        if (is_null($allowOverrideArgsInTask)) {
            throw new InvalidArgumentException('non-nullable allowOverrideArgsInTask cannot be null');
        }
        $this->container['allowOverrideArgsInTask'] = $allowOverrideArgsInTask;

        return $this;
    }

    /**
     * Gets suppressSuccessAlerts
     *
     * @return bool|null
     */
    public function getSuppressSuccessAlerts(): ?bool
    {
        return $this->container['suppressSuccessAlerts'];
    }

    /**
     * Sets suppressSuccessAlerts
     *
     * @param bool|null $suppressSuccessAlerts suppressSuccessAlerts
     *
     * @return $this
     */
    public function setSuppressSuccessAlerts(?bool $suppressSuccessAlerts): static
    {
        if (is_null($suppressSuccessAlerts)) {
            throw new InvalidArgumentException('non-nullable suppressSuccessAlerts cannot be null');
        }
        $this->container['suppressSuccessAlerts'] = $suppressSuccessAlerts;

        return $this;
    }

    /**
     * Gets autorun
     *
     * @return bool|null
     */
    public function getAutorun(): ?bool
    {
        return $this->container['autorun'];
    }

    /**
     * Sets autorun
     *
     * @param bool|null $autorun autorun
     *
     * @return $this
     */
    public function setAutorun(?bool $autorun): static
    {
        if (is_null($autorun)) {
            throw new InvalidArgumentException('non-nullable autorun cannot be null');
        }
        $this->container['autorun'] = $autorun;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


