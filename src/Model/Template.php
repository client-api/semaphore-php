<?php
/**
 * Template
 *
 * PHP version 8.1
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Semaphore API
 *
 * Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models.
 *
 * The version of the OpenAPI document: 2.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClientAPI\Semaphore\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ClientAPI\Semaphore\ObjectSerializer;

/**
 * Template Class Doc Comment
 *
 * @package  ClientAPI\Semaphore
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Template implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Template';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'projectId' => 'int',
        'inventoryId' => 'int',
        'repositoryId' => 'int',
        'environmentId' => 'int',
        'viewId' => 'int',
        'name' => 'string',
        'playbook' => 'string',
        'arguments' => 'string',
        'description' => 'string',
        'allowOverrideArgsInTask' => 'bool',
        'suppressSuccessAlerts' => 'bool',
        'app' => 'string',
        'gitBranch' => 'string',
        'type' => 'string',
        'autorun' => 'bool',
        'surveyVars' => '\ClientAPI\Semaphore\Model\TemplateSurveyVar[]',
        'vaults' => '\ClientAPI\Semaphore\Model\TemplateVault[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'projectId' => null,
        'inventoryId' => null,
        'repositoryId' => null,
        'environmentId' => null,
        'viewId' => null,
        'name' => null,
        'playbook' => null,
        'arguments' => null,
        'description' => null,
        'allowOverrideArgsInTask' => null,
        'suppressSuccessAlerts' => null,
        'app' => null,
        'gitBranch' => null,
        'type' => null,
        'autorun' => null,
        'surveyVars' => null,
        'vaults' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'projectId' => false,
        'inventoryId' => false,
        'repositoryId' => false,
        'environmentId' => false,
        'viewId' => false,
        'name' => false,
        'playbook' => false,
        'arguments' => false,
        'description' => false,
        'allowOverrideArgsInTask' => false,
        'suppressSuccessAlerts' => false,
        'app' => false,
        'gitBranch' => false,
        'type' => false,
        'autorun' => false,
        'surveyVars' => false,
        'vaults' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'projectId' => 'project_id',
        'inventoryId' => 'inventory_id',
        'repositoryId' => 'repository_id',
        'environmentId' => 'environment_id',
        'viewId' => 'view_id',
        'name' => 'name',
        'playbook' => 'playbook',
        'arguments' => 'arguments',
        'description' => 'description',
        'allowOverrideArgsInTask' => 'allow_override_args_in_task',
        'suppressSuccessAlerts' => 'suppress_success_alerts',
        'app' => 'app',
        'gitBranch' => 'git_branch',
        'type' => 'type',
        'autorun' => 'autorun',
        'surveyVars' => 'survey_vars',
        'vaults' => 'vaults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'projectId' => 'setProjectId',
        'inventoryId' => 'setInventoryId',
        'repositoryId' => 'setRepositoryId',
        'environmentId' => 'setEnvironmentId',
        'viewId' => 'setViewId',
        'name' => 'setName',
        'playbook' => 'setPlaybook',
        'arguments' => 'setArguments',
        'description' => 'setDescription',
        'allowOverrideArgsInTask' => 'setAllowOverrideArgsInTask',
        'suppressSuccessAlerts' => 'setSuppressSuccessAlerts',
        'app' => 'setApp',
        'gitBranch' => 'setGitBranch',
        'type' => 'setType',
        'autorun' => 'setAutorun',
        'surveyVars' => 'setSurveyVars',
        'vaults' => 'setVaults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'projectId' => 'getProjectId',
        'inventoryId' => 'getInventoryId',
        'repositoryId' => 'getRepositoryId',
        'environmentId' => 'getEnvironmentId',
        'viewId' => 'getViewId',
        'name' => 'getName',
        'playbook' => 'getPlaybook',
        'arguments' => 'getArguments',
        'description' => 'getDescription',
        'allowOverrideArgsInTask' => 'getAllowOverrideArgsInTask',
        'suppressSuccessAlerts' => 'getSuppressSuccessAlerts',
        'app' => 'getApp',
        'gitBranch' => 'getGitBranch',
        'type' => 'getType',
        'autorun' => 'getAutorun',
        'surveyVars' => 'getSurveyVars',
        'vaults' => 'getVaults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_EMPTY = '';
    public const TYPE_BUILD = 'build';
    public const TYPE_DEPLOY = 'deploy';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EMPTY,
            self::TYPE_BUILD,
            self::TYPE_DEPLOY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('inventoryId', $data ?? [], null);
        $this->setIfExists('repositoryId', $data ?? [], null);
        $this->setIfExists('environmentId', $data ?? [], null);
        $this->setIfExists('viewId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('playbook', $data ?? [], null);
        $this->setIfExists('arguments', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('allowOverrideArgsInTask', $data ?? [], null);
        $this->setIfExists('suppressSuccessAlerts', $data ?? [], null);
        $this->setIfExists('app', $data ?? [], null);
        $this->setIfExists('gitBranch', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('autorun', $data ?? [], null);
        $this->setIfExists('surveyVars', $data ?? [], null);
        $this->setIfExists('vaults', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['projectId']) && ($this->container['projectId'] < 1)) {
            $invalidProperties[] = "invalid value for 'projectId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inventoryId']) && ($this->container['inventoryId'] < 1)) {
            $invalidProperties[] = "invalid value for 'inventoryId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['environmentId']) && ($this->container['environmentId'] < 1)) {
            $invalidProperties[] = "invalid value for 'environmentId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['viewId']) && ($this->container['viewId'] < 1)) {
            $invalidProperties[] = "invalid value for 'viewId', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        if (($id < 1)) {
            throw new InvalidArgumentException('invalid value for $id when calling Template., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int|null
     */
    public function getProjectId(): ?int
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int|null $projectId projectId
     *
     * @return $this
     */
    public function setProjectId(?int $projectId): static
    {
        if (is_null($projectId)) {
            throw new InvalidArgumentException('non-nullable projectId cannot be null');
        }

        if (($projectId < 1)) {
            throw new InvalidArgumentException('invalid value for $projectId when calling Template., must be bigger than or equal to 1.');
        }

        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets inventoryId
     *
     * @return int|null
     */
    public function getInventoryId(): ?int
    {
        return $this->container['inventoryId'];
    }

    /**
     * Sets inventoryId
     *
     * @param int|null $inventoryId inventoryId
     *
     * @return $this
     */
    public function setInventoryId(?int $inventoryId): static
    {
        if (is_null($inventoryId)) {
            throw new InvalidArgumentException('non-nullable inventoryId cannot be null');
        }

        if (($inventoryId < 1)) {
            throw new InvalidArgumentException('invalid value for $inventoryId when calling Template., must be bigger than or equal to 1.');
        }

        $this->container['inventoryId'] = $inventoryId;

        return $this;
    }

    /**
     * Gets repositoryId
     *
     * @return int|null
     */
    public function getRepositoryId(): ?int
    {
        return $this->container['repositoryId'];
    }

    /**
     * Sets repositoryId
     *
     * @param int|null $repositoryId repositoryId
     *
     * @return $this
     */
    public function setRepositoryId(?int $repositoryId): static
    {
        if (is_null($repositoryId)) {
            throw new InvalidArgumentException('non-nullable repositoryId cannot be null');
        }
        $this->container['repositoryId'] = $repositoryId;

        return $this;
    }

    /**
     * Gets environmentId
     *
     * @return int|null
     */
    public function getEnvironmentId(): ?int
    {
        return $this->container['environmentId'];
    }

    /**
     * Sets environmentId
     *
     * @param int|null $environmentId environmentId
     *
     * @return $this
     */
    public function setEnvironmentId(?int $environmentId): static
    {
        if (is_null($environmentId)) {
            throw new InvalidArgumentException('non-nullable environmentId cannot be null');
        }

        if (($environmentId < 1)) {
            throw new InvalidArgumentException('invalid value for $environmentId when calling Template., must be bigger than or equal to 1.');
        }

        $this->container['environmentId'] = $environmentId;

        return $this;
    }

    /**
     * Gets viewId
     *
     * @return int|null
     */
    public function getViewId(): ?int
    {
        return $this->container['viewId'];
    }

    /**
     * Sets viewId
     *
     * @param int|null $viewId viewId
     *
     * @return $this
     */
    public function setViewId(?int $viewId): static
    {
        if (is_null($viewId)) {
            throw new InvalidArgumentException('non-nullable viewId cannot be null');
        }

        if (($viewId < 1)) {
            throw new InvalidArgumentException('invalid value for $viewId when calling Template., must be bigger than or equal to 1.');
        }

        $this->container['viewId'] = $viewId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets playbook
     *
     * @return string|null
     */
    public function getPlaybook(): ?string
    {
        return $this->container['playbook'];
    }

    /**
     * Sets playbook
     *
     * @param string|null $playbook playbook
     *
     * @return $this
     */
    public function setPlaybook(?string $playbook): static
    {
        if (is_null($playbook)) {
            throw new InvalidArgumentException('non-nullable playbook cannot be null');
        }
        $this->container['playbook'] = $playbook;

        return $this;
    }

    /**
     * Gets arguments
     *
     * @return string|null
     */
    public function getArguments(): ?string
    {
        return $this->container['arguments'];
    }

    /**
     * Sets arguments
     *
     * @param string|null $arguments arguments
     *
     * @return $this
     */
    public function setArguments(?string $arguments): static
    {
        if (is_null($arguments)) {
            throw new InvalidArgumentException('non-nullable arguments cannot be null');
        }
        $this->container['arguments'] = $arguments;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets allowOverrideArgsInTask
     *
     * @return bool|null
     */
    public function getAllowOverrideArgsInTask(): ?bool
    {
        return $this->container['allowOverrideArgsInTask'];
    }

    /**
     * Sets allowOverrideArgsInTask
     *
     * @param bool|null $allowOverrideArgsInTask allowOverrideArgsInTask
     *
     * @return $this
     */
    public function setAllowOverrideArgsInTask(?bool $allowOverrideArgsInTask): static
    {
        if (is_null($allowOverrideArgsInTask)) {
            throw new InvalidArgumentException('non-nullable allowOverrideArgsInTask cannot be null');
        }
        $this->container['allowOverrideArgsInTask'] = $allowOverrideArgsInTask;

        return $this;
    }

    /**
     * Gets suppressSuccessAlerts
     *
     * @return bool|null
     */
    public function getSuppressSuccessAlerts(): ?bool
    {
        return $this->container['suppressSuccessAlerts'];
    }

    /**
     * Sets suppressSuccessAlerts
     *
     * @param bool|null $suppressSuccessAlerts suppressSuccessAlerts
     *
     * @return $this
     */
    public function setSuppressSuccessAlerts(?bool $suppressSuccessAlerts): static
    {
        if (is_null($suppressSuccessAlerts)) {
            throw new InvalidArgumentException('non-nullable suppressSuccessAlerts cannot be null');
        }
        $this->container['suppressSuccessAlerts'] = $suppressSuccessAlerts;

        return $this;
    }

    /**
     * Gets app
     *
     * @return string|null
     */
    public function getApp(): ?string
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param string|null $app app
     *
     * @return $this
     */
    public function setApp(?string $app): static
    {
        if (is_null($app)) {
            throw new InvalidArgumentException('non-nullable app cannot be null');
        }
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets gitBranch
     *
     * @return string|null
     */
    public function getGitBranch(): ?string
    {
        return $this->container['gitBranch'];
    }

    /**
     * Sets gitBranch
     *
     * @param string|null $gitBranch gitBranch
     *
     * @return $this
     */
    public function setGitBranch(?string $gitBranch): static
    {
        if (is_null($gitBranch)) {
            throw new InvalidArgumentException('non-nullable gitBranch cannot be null');
        }
        $this->container['gitBranch'] = $gitBranch;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets autorun
     *
     * @return bool|null
     */
    public function getAutorun(): ?bool
    {
        return $this->container['autorun'];
    }

    /**
     * Sets autorun
     *
     * @param bool|null $autorun autorun
     *
     * @return $this
     */
    public function setAutorun(?bool $autorun): static
    {
        if (is_null($autorun)) {
            throw new InvalidArgumentException('non-nullable autorun cannot be null');
        }
        $this->container['autorun'] = $autorun;

        return $this;
    }

    /**
     * Gets surveyVars
     *
     * @return \ClientAPI\Semaphore\Model\TemplateSurveyVar[]|null
     */
    public function getSurveyVars(): ?array
    {
        return $this->container['surveyVars'];
    }

    /**
     * Sets surveyVars
     *
     * @param \ClientAPI\Semaphore\Model\TemplateSurveyVar[]|null $surveyVars surveyVars
     *
     * @return $this
     */
    public function setSurveyVars(?array $surveyVars): static
    {
        if (is_null($surveyVars)) {
            throw new InvalidArgumentException('non-nullable surveyVars cannot be null');
        }
        $this->container['surveyVars'] = $surveyVars;

        return $this;
    }

    /**
     * Gets vaults
     *
     * @return \ClientAPI\Semaphore\Model\TemplateVault[]|null
     */
    public function getVaults(): ?array
    {
        return $this->container['vaults'];
    }

    /**
     * Sets vaults
     *
     * @param \ClientAPI\Semaphore\Model\TemplateVault[]|null $vaults vaults
     *
     * @return $this
     */
    public function setVaults(?array $vaults): static
    {
        if (is_null($vaults)) {
            throw new InvalidArgumentException('non-nullable vaults cannot be null');
        }
        $this->container['vaults'] = $vaults;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


